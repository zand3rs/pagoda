<html>
<head>
    <link rel="stylesheet" type="text/css" href="css/popcorn.css"/>
    <script src="js/jquery.min.js"></script>
    <script src="js/zip/dataview.js"></script>
    <script src="js/zip/inflate.js"></script>
    <script src="js/zip/deflate.js"></script>
    <script src="js/zip/zip.js"></script>
    <script src="js/zip/zip-fs.js"></script>

    <script>
    //-------------------------------------------------------------------------
    //-------------------------------------------------------------------------

    var host = 'http://localhost/~zander/popcorn';
    window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
    window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder;

    var fileSystem = null;
    var activeUser = null;
    var userDir = null;

    //-------------------------------------------------------------------------

    function strPad(i,l,s) {
        var o = i.toString();
        if (!s) { s = '0'; }
        while (o.length < l) {
            o = s + o;
        }
        return o;
    }

    //-------------------------------------------------------------------------

    function errorHandler(e) {
      var msg = '';

      switch (e.code) {
          case FileError.QUOTA_EXCEEDED_ERR:
              msg = 'QUOTA_EXCEEDED_ERR';
              break;
          case FileError.NOT_FOUND_ERR:
              msg = 'NOT_FOUND_ERR';
              break;
          case FileError.SECURITY_ERR:
              msg = 'SECURITY_ERR';
              break;
          case FileError.INVALID_MODIFICATION_ERR:
              msg = 'INVALID_MODIFICATION_ERR';
              break;
          case FileError.INVALID_STATE_ERR:
              msg = 'INVALID_STATE_ERR';
              break;
          default:
              msg = 'Unknown Error';
              break;
      };

      $("#flash").html($("#flash").html() + 'Error: ' + msg + '<br>');
    }

    //-------------------------------------------------------------------------

    function initFs() {
        window.requestFileSystem(window.PERSISTENT, 1024*1024*1024, onInitFs, errorHandler);
    }

    //-------------------------------------------------------------------------

    function onInitFs(fs) {
        fileSystem = fs;
        //$("#flash").html('Opened file system: ' + fs.name);
    }

    function createDir(rootDirEntry, folders, callback) {
        // Throw out './' or '/' and move on to prevent something like '/foo/.//bar'.
        if (folders[0] == '.' || folders[0] == '') {
            folders = folders.slice(1);
        }

        if (folders.length) {
            rootDirEntry.getDirectory(folders[0], {create: true}, function(dirEntry) {
                // $("#flash").html($("#flash").html() + 'dir: ' + folders[0] + ' created.<br>');
                // Recursively add the new subfolder (if we still have another to create).
                createDir(dirEntry, folders.slice(1), callback);
            }, errorHandler);
        } else {
            if (callback) {
                callback(rootDirEntry);
            }
        }
    }

    function createFile(rootDirEntry, file_path, callback) {
        var folders = file_path.split('/');
        var file = folders.pop();

        createDir(rootDirEntry, folders, function(dirEntry) {
            dirEntry.getFile(file, {create: true}, function(fileEntry) {
                callback(fileEntry);
            });
        });
    }

    function createTempFile(callback) {
        var tmpFilename = "tmp.dat";
        requestFileSystem(TEMPORARY, 4 * 1024 * 1024 * 1024, function(filesystem) {
            function create() {
                filesystem.root.getFile(tmpFilename, {create : true}, function(zipFile) {
                    callback(zipFile);
                });
            }

            filesystem.root.getFile(tmpFilename, null, function(entry) {
                entry.remove(create, create);
                }, create);
        });
    }

    //-------------------------------------------------------------------------

    function writeToFile(file_path, data, callback) {
        $("#flash").html($("#flash").html() + 'start copying...<br>');
        if (fileSystem) {
            $("#flash").html($("#flash").html() + 'with valid fs...<br>');
            //--- create dirs first otherwise getFile will fail...
            fileSystem.root.getFile(file_path, {create: true}, function(fileEntry) {
                $("#flash").html($("#flash").html() + 'file created...<br>');
                fileEntry.createWriter(function(fileWriter) {
                    fileWriter.onwriteend = function(e) {
                        $("#flash").html($("#flash").html() + 'Write completed: ' + file_path + '<br>');
                        callback(file_path);
                    };

                    fileWriter.onerror = function(e) {
                        $("#flash").html($("#flash").html() + 'Write failed: ' + e.toString() + '<br>');
                    };

                    var bb = new BlobBuilder(data);
                    fileWriter.write(bb.getBlob());

                }, errorHandler);
            }, errorHandler);
        }
    }

    //-------------------------------------------------------------------------

    function initUserDir(user) {
        if (!user) return;

        userDir = 'files/' + strPad(user.id, 10);
        if (fileSystem) {
            createDir(fileSystem.root, userDir.split('/'));
        }
    }

    //-------------------------------------------------------------------------
    //-------------------------------------------------------------------------

    function toArray(list) {
        return Array.prototype.slice.call(list || [], 0);
    }

    function listResults(entries) {
        var fragment = document.createDocumentFragment();

        entries.forEach(function(entry, i) {
            var type = entry.isDirectory ? 'folder' : 'file';
            var li = document.createElement('li');
            li.innerHTML = ['<span>', type + ': ' + entry.name, '</span>'].join('');
            fragment.appendChild(li);
        });

        document.querySelector('#filelist').appendChild(fragment);
    }

    function showFs() {

        var rootDirEntry = fileSystem.root;
        var entries = [];

        rootDirEntry.getDirectory(userDir, {create: false}, function(dirEntry) {
            var dirReader = dirEntry.createReader();
            // Call the reader.readEntries() until no more results are returned.
            var readEntries = function() {
                dirReader.readEntries (function(results) {
                    if (!results.length) {
                        listResults(entries.sort());
                    } else {
                        entries = entries.concat(toArray(results));
                        readEntries();
                    }
                }, errorHandler);
            };

            readEntries(); // Start reading dirs.
        }, errorHandler);
    }

    function showZipContent(file_path) {
    }

    //-------------------------------------------------------------------------
    //-------------------------------------------------------------------------
    
    function onerror(message) {
        $("#flash").html('ERROR: ' + message + '<br>');
    }

    var model = (function() {
        var URL = window.webkitURL || window.mozURL || window.URL;

        return {
            getEntries : function(file, onend) {
                //var blobReader = new zip.BlobReader(file);
                var blobReader = new zip.HttpReader(file);
                zip.createReader(blobReader, function(zipReader) {
                    zipReader.getEntries(onend);
                }, onerror);
            },
            getEntryFile : function(entry, onend, onprogress) {
                var writer, zipFileEntry;

                function getData() {
                    //onend('onend: test_url');
                    $("#flash").html($("#flash").html() + 'entry: ' + ((entry.getData) ? 'true' : 'false') + '<br>');
                    /*
                    entry.getData(writer, function(blob) {
                        var blobURL = zipFileEntry.toURL();
                        onend(blobURL);
                    }, onprogress);
                    */
                }

                var file_path = userDir + '/' + entry.filename;

                //-- create file path...
                /*
                createFile(fileSystem.root, file_path, function(fileEntry) {
                    zipFileEntry = fileEntry;
                    writer = new zip.FileWriter(zipFileEntry);
                    getData();
                });
                */
                

                createTempFile(function(fileEntry) {
                    zipFileEntry = fileEntry;
                    writer = new zip.FileWriter(zipFileEntry);
                    getData();
                });
            }
        };
    })();

    //-------------------------------------------------------------------------
    //-------------------------------------------------------------------------

    var bookmarks = new Array();

    //-------------------------------------------------------------------------

    function getActiveUser() {
        var app_url = host + '/users/getActiveUser';

        $.get(app_url, function(data) {
            if (data && data.id) { 
                activeUser = data;
                initUserDir(activeUser);
            }
        }, 'json');
    }

    //-------------------------------------------------------------------------

    function downloadBookmark(id) {
        for (var i in bookmarks) {
            var bookmark = bookmarks[i];
            if (id == bookmark.id && bookmark.archive) {
                var url = host + bookmark.archive;
                deflateArchive(url);
                //showFs();
            }
        }
        //alert(JSON.stringify(bookmark));
    }

    //-------------------------------------------------------------------------

    function showBookmarks() {
        var app_url = host + '/bookmarks/get_all';
        $.get(app_url, function(data) {
                var bookmarksHtml = '';
                $.each(data, function(key, val) {
                    var bookmark = val.Bookmark;
                    bookmarks.push(bookmark);

                    //bookmarksHtml += "<div><a href='" + bookmark.url + "' target='_blank'>" + bookmark.title + "</a></div>";
                    bookmarksHtml += "<div><a href='javascript:downloadBookmark(" + bookmark.id + ")'>" + bookmark.title + "</a></div>";
                });
                $('#bookmarks').html(bookmarksHtml);
        }, 'json');
    }

    //-------------------------------------------------------------------------

    function addBookmark(title, url) {
        var app_url = host + '/bookmarks/save';
        var dataObj = {
             Bookmark: {
                 title: title,
                 url: url
             }
        };
        var payload = JSON.stringify(dataObj);

        $.ajax({
            type: 'POST',
            contentType: 'application/json',
            processData: false,
            dataType: 'json',
            timeout: 60000,
            url: app_url,
            data: payload
        })
        .success(function(data, textStatus, jqXHR) {
                })
        .error(function(jqXHR, textStatus, errorThrown) {
                })
        .complete(function(jqXHR, textStatus) {
                window.close();
                });

    }

    //-------------------------------------------------------------------------

    function downloadFile(url) {
        $.get(url, function(data) {
            $("#flash").html($("#flash").html() + 'download successful: ' + url + '<br>');

            var file_name = url.replace(/.*\//, '');
            var file_path = userDir + '/' + file_name;

            $("#flash").html($("#flash").html() + 'file_path: ' + file_path + '<br>');
            writeToFile(file_path, data, function(file_path) {
                $("#flash").html($("#flash").html() + 'Write callback: ' + file_path + '<br>');
               
            });
        });
    }

    //-------------------------------------------------------------------------

    function deflateArchive(url) {
        model.getEntries(url, function(entries) {
            entries.forEach(function(entry) {
                //$("#flash").html($("#flash").html() + 'entry: ' + entry.filename + '<br>');
                model.getEntryFile(entry, function(file_path) {
                    $("#flash").html($("#flash").html() + 'file_path: ' + file_path + '<br>');
                }, function(current, total) {
                    $("#flash").html('progress: ' + current + '<br>');
                });
            });
        });
    }

    //-------------------------------------------------------------------------

    $(document).ready(function() {
        initFs();
        getActiveUser();
        showBookmarks();

        $("#add-bookmark").click(function() {
            chrome.tabs.getSelected(null, function(tab) {
                addBookmark(tab.title, tab.url);
                });
            });

    });
    </script>
</head>

<body>
    <div id="action"><button id="add-bookmark">Add Bookmark</button></div>
    <hr>
    <div id="flash"></div>
    <div id="bookmarks"></div>
    <div id="filelist"></div>
</body>
</html>
